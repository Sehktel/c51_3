;;(ns c51cc.ast
;;  "Модуль для визуализации и печати абстрактного синтаксического дерева (AST)"
;;  (:require [c51cc.parser :as parser]
;;            [c51cc.lexer :as lexer]
;;            [c51cc.logger :as log]
;;            [clojure.pprint :as pprint]
;;            [clojure.string :as str]))

(defn- indent-str
  "Создает строку отступа для визуализации иерархии AST"
  [depth]
  (apply str (repeat (* depth 2) " ")))

(defprotocol ASTVisualization
  "Протокол для визуализации узлов AST"
  (visualize-node [node depth]
    "Преобразование узла AST в читаемую строку с учетом глубины"))

(extend-protocol ASTVisualization
  Object
  (visualize-node [node depth]
    (str (indent-str depth) (pr-str node)))
  
  nil
  (visualize-node [_ depth]
    (str (indent-str depth) "nil")))

(extend-type clojure.lang.IPersistentMap
  ASTVisualization
  (visualize-node [node depth]
    (let [indent (indent-str depth)
          type-str (str indent "Тип: " (:type node))]
      (str/join "\n" 
        (concat 
          [type-str]
          (case (:type node)
            :program 
            (cons 
              (str indent "Количество узлов: " (count (:nodes node)))
              (mapcat #(vector (visualize-node % (inc depth))) (:nodes node)))
            
            :function-declaration
            [(str indent "Имя: " (:name node))
             (str indent "Тип возвращаемого значения: " (:return-type node))
             (str indent "Параметры:")
             (str/join "\n" 
               (map #(str (indent-str (inc depth)) 
                          "- Тип: " (:type %) 
                          ", Имя: " (:name %)) 
                    (:parameters node)))
             (str indent "Тело функции:")
             (str/join "\n" 
               (map #(str (indent-str (inc depth)) (pr-str %)) 
                    (:body node)))]
            
            :variable-declaration
            [(str indent "Имя: " (:name node))
             (str indent "Тип: " (:var-type node))]
            
            :expression
            [(str indent "Значение: " (:value node))]
            
            ;; Обработка неизвестных типов
            [(str indent "Неизвестный тип узла")]))))))

(defn print-ast-tree
  "Улучшенная функция печати AST дерева с детальной визуализацией

  Архитектурные особенности:
  - Рекурсивная визуализация структуры
  - Поддержка различных типов узлов
  - Иерархическое представление"
  [input]
  (log/debug "Начало визуализации Abstract Syntax Tree")
  (let [tokens (if (string? input)
                 (lexer/tokenize input)
                 input)
        ast (parser/parse tokens)]
    (log/info "=== Визуализация Abstract Syntax Tree ===")
    (log/info (visualize-node ast 0))
    (log/info "=========================================")))

(defn pretty-print-ast
  "Улучшенная функция детальной печати AST

  Преимущества:
  - Расширенная визуализация структуры
  - Поддержка сложных иерархических представлений"
  [input]
  (log/debug "Начало детальной визуализации AST")
  (let [tokens (if (string? input)
                 (lexer/tokenize input)
                 input)
        ast (parser/parse tokens)]
    (log/info "=== Детальная визуализация AST ===")
    (pprint/pprint ast)
    (log/info "==================================")))