(ns c51cc.preprocessor
  "Модуль предварительной обработки исходного кода C51"
  (:require [clojure.string :as str]
            [c51cc.logger :as log]))

(defn remove-comments
  "Удаляет комментарии из исходного кода C

  Поддерживает два типа комментариев:
  1. Однострочные комментарии (//)
  2. Многострочные комментарии (/* */)
  3. Inline-комментарии

  Алгоритм:
  - Последовательно обрабатывает входной текст
  - Удаляет комментарии, сохраняя структуру кода
  - Обеспечивает корректность обработки краевых случаев

  Сложность: O(n), где n - длина исходного кода"
  [code]
  (log/debug "Начало удаления комментариев из исходного кода")
  (let [;; Регулярное выражение для поиска комментариев
        ;; Обновлено для корректного удаления inline-комментариев
        comment-pattern #"(//.*$|/\*.*?\*/|(?<=\S)\s*//.*$)"
        
        ;; Разбиваем код на строки и обрабатываем каждую
        lines (str/split-lines code)
        lines-without-comments (mapv #(str/replace % comment-pattern "") lines)
        
        ;; Воссоединяем строки
        code-without-comments (str/join "\n" lines-without-comments)]
    
    (log/trace "Длина исходного кода: " (count code)
               ", Длина кода после удаления комментариев: " (count code-without-comments))
    
    ;; Очистка от лишних пробелов и переводов строк
    (-> code-without-comments
        (str/replace #"\n\s*\n" "\n")  ; Удаление пустых строк
        (str/trim))))

(defn preprocess
  "Основная функция предварительной обработки кода

  Выполняет следующие шаги:
  1. Удаление комментариев
  2. Возможные будущие преобразования (например, обработка препроцессорных директив)

  Возвращает подготовленный к парсингу код"
  [code]
  (log/debug "Начало предварительной обработки исходного кода")
  (let [code-without-comments (remove-comments code)]
    (log/info "Предварительная обработка завершена")
    code-without-comments)) 